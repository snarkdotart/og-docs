[[{"l":"About OG Studio","p":["OG Studio provides a comprehensive set of tools designed to foster the creation of dynamic, generative NFT collections. As a developer, you'll find an environment where you can independently experiment with cutting-edge technology, and create NFTs that have the ability to grow, breed, fuse, and react to blockchain or real-life events — even after they've been initially purchased. Here, we offer an early access to these trailblazing tools. This document provides a detailed description of each tool in this powerful toolkit.","System components"]},{"l":"Components of the OG Studio System","p":["Blockchain Smart Contract: This is where the magic begins. The blockchain smart contract is responsible for creating events that dictate the behaviour and characteristics of the NFTs. It's the foundational layer of the system, establishing the rules and parameters for your dynamic NFT collection.","Event Listener: Acting as an intermediary, the event listener accepts events emanating from the blockchain contract or from an external API interface. This tool is crucial as it acts as a bridge between the smart contract and the other components of the system.","Trait Generator: This component is responsible for determining what the NFT will be like. Based on the events accepted by the event listener, the trait generator assigns characteristics and properties to the NFT, creating a unique digital asset each time.","Artwork Generator: Connected to the generative scene and render farms, the visuals generator is where your NFTs come to life. It takes the traits assigned by the trait generator and translates them into visual representations, creating an NFT that is not only unique but also aesthetically appealing.","Metadata Updater: The final piece of the puzzle, the metadata updater ensures that the metadata of the artwork is updated on the blockchain. It also ensures that this updated information is reflected in the wallets of the owners as well as on various platforms like OpenSea. This continuous updating is what allows your NFTs to be truly dynamic, reflecting changes in real-time."]}],[{"l":"Artwork Generator","p":["Artwork Generator takes input data from trait generator. Artwork generator renders and outputs various media files: static images, videos, 3D assets, audio files.","OG platform supports following Artwork Generator types:","JavaScript based","Blender scenes","Houdini scenes","Custom docker containers","You can find an example of an JavaScript based Artwork Generator in this boilerplate repository:","icon=\"mark-github\" Trait Generator boilerplate"]}],[{"l":"Trait Generator","p":["Trait Generator is a piece of JavaScript code that gets invoked for making tokens evolve. Trait generator defines, what traits and properties the token will have.","Trait generator defines for each NFT:","Traits: Visible to public in metadata, on marketplaces.","Properties: Not visible, internal data storage.","Trait generator also decides, if a new generation should be created.","You can learn how Trait Generator works in this boilerplate repository:","Trait Generator boilerplate icon=\"mark-github\""]}],[{"l":"Dynamic NFTs","p":["Dynamic NFTs are a type of non-fungible token (NFT) that can change over time due to external conditions. Unlike static NFTs, which remain the same once minted to the blockchain, dynamic NFTs can alter their metadata and potentially the appearance of the token itself based on certain events or achievements. They are sometimes referred to as \"living NFTs\".","An NFT is a unique digital token stored on a blockchain, representing ownership of a specific item. Each NFT is unique and differentiated from others by various data points, including a unique contract address and token ID, making them non-interchangeable.","Static NFTs keep their data immutable once minted. This includes NFT art, GIFs, and videos, where the specific image or video linked to the NFT doesn't change after it's minted. Any changes to the metadata of a static NFT require knowledge of code and can be a difficult and time-consuming procedure, making many existing NFTs static and possessing permanently immutable traits.","However, dynamic NFTs offer a way around these limitations. They function by storing data in an editable format, usually created using the ERC-721/1155 token standard, also known as \"semi-fungible.\" This type of NFT is particularly useful for projects that need to regularly update aspects of their metadata, such as real-world assets, blockchain-based fantasy sports leagues, and progression-based video games.","Changes to a dynamic NFT can be triggered by a smart contract, with an oracle typically sending external data to the smart contract, which then triggers a change in the NFT's metadata, and subsequently, its characteristics, like its appearance.","Examples of dynamic NFTs include artwork by Beeple that changes its appearance based on real-world events, the digital cats in the NFT-based game Cryptokitties, and the digital collectibles of NBA star LaMelo Ball that incorporate on-chain sports data and change based on the outcome of games."]},{"l":"Additional reading","p":["https://www.coindesk.com/learn/what-are-dynamic-nfts-understanding-the-evolving-nft/"]}],[{"i":"what-is-dynamic-art","l":"What is Dynamic Art?","p":["Dynamic art is a genre of art that embodies the principles of change, transformation, and motion. In the digital realm, it involves the creation of artwork that changes and evolves over time due to the application of generative and interactive algorithms. This type of art is typically characterized by three main properties: it is digital, generative, and interactive.","Digital: Dynamic art exists in the digital realm. It leverages the potential of modern computing technologies to create artwork that transcends static forms.","Generative: The artwork is not designed in its final form by the artist. Instead, the artist creates a system, usually through coding, which generates the artwork based on a set of initial conditions and rules.","Interactive: Dynamic art often involves a level of interaction, allowing viewers to influence the artwork's evolution or change over time."]},{"i":"heterosis-collection-a-dynamic-art-example","l":"Heterosis Collection: A Dynamic Art Example","p":["One notable example of dynamic, generative, and interactive art is the Heterosis collection by artists Mat Collishaw and Danil Krivoruchko."]},{"l":"Overview","p":["Heterosis is a unique flower hybridization experience where participants can cultivate their own bespoke, animated NFT flowers. The collection consists of breedable, dynamic NFT flora that exist in the digital wallets of their respective owners, as well as collectively in an extraordinary metaverse 'Greenhouse' - a virtual, post-apocalyptic recreation of London’s National Gallery."]},{"l":"Mechanism","p":["Upon minting, each collector receives a Heterosis flower with unique DNA and a combination of traits. The NFTs primary look is the result of random luck. Each flower has a unique title generated by AI, using words from ‘The Library of Babel’ a short story by Jorge Luis Borges.","The owner of a Heterosis flower NFT can select any other flower in the collection as a second parent, and to hybridize, they must pay that second parent's owner a fee. When the child flower is generated, the owner can decide to either replace their current flower with the new generation or keep the original one. The second parent flower is not affected in any way by this hybridization process.","Through the hybridization process, collectors can discover new rules that activate mutations and unlock new species and advanced characteristics. Initially, the flowers in the collection have only a few basic traits. But through the hybridization process, collectors can discover new rules that activate mutations and unlock new species and advanced characteristics.","In conclusion, dynamic art represents a new frontier in the art world, leveraging digital technology to create interactive, generative works that evolve over time. The Heterosis collection is a prime example of this exciting new genre, offering a unique blend of art, technology, and interactivity that brings the concept of dynamic art to life in the digital realm."]}],[{"l":"Retrieve task status","p":["To retrieve current task status:","ENDPOINT: https://srp.snark.art/api/v1/tasks?id=TASK_UID","HEADERS: Authorization=Bearer API-KEY","METHOD: GET"]},{"i":"response-example","l":"Response example:"}],[{"l":"Submit new render task","p":["Make sure the required collection is created in the SRP database.","Get the UUID of collection and save it.","Get the API key from the administrator","Submit new task using API","ENDPOINT: https://srp.snark.art/api/v1/tasks","HEADERS: Authorization=Bearer API-KEY","METHOD: POST","CONTENT TYPE: application/json","JSON DATA:"]},{"l":"Example on Python"}],[{"l":"Uploading assets for SRP collection","p":["Uploading process must be done in several steps","Prepare you assets as ZIP archive. Please make sure that the root of the archive is the root of the resource directory. Do not create unnecessary nested levels.","Get upload URL","ENDPOINT: /api/v1/tasks/get_asset_upload_url/?collection_uid=COLLECTION_ID","HEADERS: Authorization=Bearer API-KEY","METHOD: GET","RESPONSE:","Now you can upload your archive using upload_url and PUT method. Be sure to use the specified content type!","Notify the server when the upload is complete","ENDPOINT: /api/v1/tasks/create_asset/","METHOD: POST","CONTENT TYPE: application/json","REQUEST DATA:"]},{"l":"JavaScript Example"},{"l":"Python Example"}],[{"l":"Web hooks","p":["You can define web hook URL using request data in render_options field when creating a task.","You can define multiple URLs:","You can define a dict instead a string to define more details:","Web hook data example:","The output_files field only exists if the status is done. Output file path is relative path on Google cloud storage. Full path is: BUCKET_NAME/RELATIVE_PATH"]}]]